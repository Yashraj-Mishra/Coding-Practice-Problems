import java.util.*;
class Solution {

    static void kth_Largest_MaxHeap(int[] arr, int k) {

        PriorityQueue<Integer>pq= new PriorityQueue<>((a,b)->b-a);
        
        int n = arr.length  ;

        for (int i = 0; i < arr.length; i++) {
            pq.add(arr[i])  ;
        }

        int f = k - 1 ;

        while (f > 0) {
            pq.remove()  ;
            f-- ;
        }

        System.out.println("Kth Largest element "+pq.peek())  ;
    }

    static void kth_Smallest_MinHeap(int[] arr, int k) {

        PriorityQueue<Integer>pq= new PriorityQueue<>();
        int n = arr.length  ;

        for (int i = 0; i < n; i++) {
            pq.add(arr[i])  ;
        }

        int f = k - 1 ;

        while (f > 0) {
            pq.remove()  ;
            f-- ;
        }

        System.out.println("Kth Smallest element "+pq.peek())  ;
    }
 
public static void main(String args[]) {

    Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int a[] = new int[n]
        for(int i=0;i<n;i++)
        {
            a[i]=sc.nextInt();
        }
        int k = sc.nextInt();
    kth_Largest_MaxHeap(a, k)  ;
    kth_Smallest_MinHeap(a, k)  ;
}
}

Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int a[] = new int[n]
        for(int i=0;i<n;i++)
        {
            a[i]=sc.nextInt();
        }
