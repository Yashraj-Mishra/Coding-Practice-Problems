/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution 
{
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) 
    {
        ListNode curr1=list1,curr2=list2,temp;
        if((curr1==null)&&(curr2==null))
        {
            return null;
        }
        if((curr1==null)&&(curr2!=null))
        {
            return list2;
        }
        if((curr1!=null)&&(curr2==null))
        {
            return list1;
        }
        if(curr1.val<curr2.val)
        {
            temp=curr1;
            curr1=curr1.next;
        }
        else
        {
            temp=curr2;
            curr2=curr2.next;
        }
        while((curr1!=null)||(curr2!=null))
        {
            if((curr1!=null)&&(curr2!=null)&&(curr1.val<curr2.val))
            {
                temp.next=curr1;
                curr1=curr1.next;
                temp=temp.next;
                continue;
            }
            else if((curr1!=null)&&(curr2!=null)&&(curr1.val>=curr2.val))
            {
                temp.next=curr2;
                curr2=curr2.next;
                temp=temp.next;
                continue;
            }
            else if(curr1==null)
            {
                while(curr2!=null)
                {
                    temp.next=curr2;
                    curr2=curr2.next;
                    temp=temp.next;
                }
                continue;
            }
            else if(curr2==null)
            {
                while(curr1!=null)
                {
                    temp.next=curr1;
                    curr1=curr1.next;
                    temp=temp.next;
                }
                continue;
            }
            else
            {
                continue;
            }
        }
        return ((list1.val>=list2.val)?list2:list1);
    }
}
