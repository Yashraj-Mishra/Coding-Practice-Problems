/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution 
{
    boolean flag;
    public boolean isSubtree(TreeNode root, TreeNode subRoot) 
    {
        if((root!=null)&&(subRoot!=null)&&(root.val==subRoot.val))
        {
            flag=check(root,subRoot);
            if(flag==true)
            {
                return true;
            }
            else
            {
                return isSubtree(root.left,subRoot) || isSubtree(root.right,subRoot);
            }
        }
        else if((root!=null)&&(subRoot!=null)&&(root.val!=subRoot.val))
        {
            return isSubtree(root.left,subRoot) || isSubtree(root.right,subRoot);
        }
        else
        {
            return false;
        }
    }
    public static boolean check(TreeNode root, TreeNode subRoot) 
    {
        if((root!=null)&&(subRoot!=null)&&(root.val==subRoot.val))
        {
            return check(root.left,subRoot.left) & check(root.right,subRoot.right);
        }
        else if((root!=null)&&(subRoot!=null)&&(root.val!=subRoot.val))
        {
            return false;
        }
        else if((root==null)&&(subRoot==null))
        {
            return true;
        }
        else
        {
            return false;
        }
    }
}
