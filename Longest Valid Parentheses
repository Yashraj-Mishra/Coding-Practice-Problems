class Solution 
{
    public int longestValidParentheses(String s) 
    {
        int i,a=0,b=0,max=0,m=0;
        Stack<Integer> st = new Stack<Integer>();
        if(s.equals(""))
        {
            return 0;
        }
        st.push(0);
        for(i=1;i<s.length();i++)
        {
            if(s.charAt(i)=='(')
            {
                st.push(i);
            }
            else
            {
                if((st.empty()!=true)&&(s.charAt(st.peek())=='('))
                {
                    st.pop();
                }
                else
                {
                    st.push(i);
                }
            }
        }
        if(st.empty()==true)
        {
            return s.length();
        }
        a=st.peek();
        st.pop();
        m=s.length()-1-a;
        if(m>max)
        {
            max=m;
        }
        if(st.empty())
        {
            if((a==0)||(a==s.length()-1))
            {
                return (s.length()-1);
            }
            else
            {
                return ((s.length()-1)-a)>(a-0)?((s.length()-1)-a):(a-0);
            }
        }
        while(st.empty()!=true)
        {
            b=st.peek();
            st.pop();
            m=a-b-1;
            a=b;
            if(m>max)
            {
                max=m;
            }
        }
        m=b-0;
        if(m>max)
        {
            max=m;
        }
        return max;
    }
}
